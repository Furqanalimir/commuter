// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataFruit data fruit
//
// swagger:model data.Fruit
type DataFruit struct {

	// currency
	// Required: true
	// Enum: ["usd","kd"]
	Currency *string `json:"currency"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	// Required: true
	// Max Length: 15
	// Min Length: 4
	Name *string `json:"name"`

	// origin
	// Required: true
	Origin *string `json:"origin"`

	// price
	// Required: true
	Price *float64 `json:"price"`
}

// Validate validates this data fruit
func (m *DataFruit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrigin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dataFruitTypeCurrencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["usd","kd"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataFruitTypeCurrencyPropEnum = append(dataFruitTypeCurrencyPropEnum, v)
	}
}

const (

	// DataFruitCurrencyUsd captures enum value "usd"
	DataFruitCurrencyUsd string = "usd"

	// DataFruitCurrencyKd captures enum value "kd"
	DataFruitCurrencyKd string = "kd"
)

// prop value enum
func (m *DataFruit) validateCurrencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dataFruitTypeCurrencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DataFruit) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	// value enum
	if err := m.validateCurrencyEnum("currency", "body", *m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *DataFruit) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 4); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 15); err != nil {
		return err
	}

	return nil
}

func (m *DataFruit) validateOrigin(formats strfmt.Registry) error {

	if err := validate.Required("origin", "body", m.Origin); err != nil {
		return err
	}

	return nil
}

func (m *DataFruit) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this data fruit based on context it is used
func (m *DataFruit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DataFruit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataFruit) UnmarshalBinary(b []byte) error {
	var res DataFruit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
